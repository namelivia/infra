---
- hosts: all
  become: true
  vars_files:
    - /vars/variables.yml
  roles:
    - role: ansible-common
      vars:
        - encryption_key_path: "{{ backup_encryption_key_path }}"
        - aws_access_key_id: "{{ backup_aws_access_key_id }}"
        - aws_secret_access_key: "{{ backup_aws_secret_access_key }}"

- hosts: digitalocean
  become: true
  vars_files:
    - /vars/variables.yml
  roles:
    - role: prometheus.prometheus.node_exporter
    - role: ansible-cadvisor
    - role: ansible-restic
      vars:
        - aws_access_key_id: "{{ restic_aws_access_key_id }}"
        - aws_secret_access_key: "{{ restic_aws_secret_access_key }}"
    - role: ansible-reverse-proxy
      vars:
        # READ: https://ghost.org/docs/faq/proxying-https-infinite-loops/
        - proto_override: "https"
    - role: ansible-openvpn-client
      vars:
        - vpn_endpoint: "{{ openvpn2_domain_name }}"
        - client_private_key: "{{ lookup('file', '/vars/digitalocean.key') }}"
        - openvpn_static_key: "{{ lookup('file', '/vars/server.key') }}"
        - client_certificate: "{{ lookup('file', '/vars/digitalocean.crt') }}"
        - server_ca: "{{ lookup('file', '/vars/server.crt') }}"
    - role: ansible-like-and-share-twitter-bot
      vars:
        - consumer_key: "{{ like_bot_consumer_key }}"
        - consumer_secret: "{{ like_bot_consumer_secret }}"
        - access_token_key: "{{ like_bot_access_token_key }}"
        - access_token_secret: "{{ like_bot_access_token_secret }}"
        - idle_period: "{{ like_bot_idle_period }}"
        - sentry_url: "{{ python_sentry_url }}"
    - role: ansible-movie-quote-twitter-bot
      vars:
        - twitter_enabled: "{{ movie_bot_twitter_enabled }}"
        - twitter_consumer_key: "{{ movie_bot_twitter_consumer_key }}"
        - twitter_consumer_secret: "{{ movie_bot_twitter_consumer_secret }}"
        - twitter_access_token_key: "{{ movie_bot_twitter_access_token_key }}"
        - twitter_access_token_secret: "{{ movie_bot_twitter_access_token_secret }}"
        - mastodon_enabled: "{{ movie_bot_mastodon_enabled }}"
        - mastodon_client_id: "{{ movie_bot_mastodon_client_id }}"
        - mastodon_client_secret: "{{ movie_bot_mastodon_client_secret }}"
        - mastodon_api_base_url: "{{ movie_bot_mastodon_api_base_url }}"
        - mastodon_login: "{{ movie_bot_mastodon_login }}"
        - mastodon_password: "{{ movie_bot_mastodon_password }}"
        - idle_period: "{{ movie_bot_idle_period }}"
        - sentry_url: "{{ python_sentry_url }}"
    - role: ansible-ghost
      vars:
        - domain_name: "{{ ghost_domain_name }}"
        - database_name: "{{ ghost_database_name }}"
        - database_user: "{{ ghost_database_user }}"
        - database_password: "{{ ghost_database_password }}"
        - dump_day: 2
        - backup_day: 4
        - mysql_root_password: "{{ghost_mysql_root_password}}"

- hosts: azure
  become: true
  vars_files:
    - /vars/variables.yml
  roles:
    - role: prometheus.prometheus.node_exporter
    - role: ansible-cadvisor
    - role: ansible-restic
      vars:
        - aws_access_key_id: "{{ restic_aws_access_key_id }}"
        - aws_secret_access_key: "{{ restic_aws_secret_access_key }}"
    - role: ansible-openvpn-client
      vars:
        - vpn_endpoint: "{{ openvpn2_domain_name }}"
        - client_private_key: "{{ lookup('file', '/vars/azure.key') }}"
        - openvpn_static_key: "{{ lookup('file', '/vars/server.key') }}"
        - client_certificate: "{{ lookup('file', '/vars/azure.crt') }}"
        - server_ca: "{{ lookup('file', '/vars/server.crt') }}"
    - role: ansible-iptables
      vars:
        - exposed_ports: "{{ azure_exposed_ports }}"
    - role: ansible-kimai
      vars:
        - domain_name: "{{ kimai_domain_name }}"
        - host_port: "{{ kimai_host_port }}"
        - database_name: "{{ kimai_database_name }}"
        - database_user: "{{ kimai_database_user }}"
        - database_password: "{{ kimai_database_password }}"
        - dump_day: 4
        - backup_day: 5
        - admin_mail: "{{ kimai_admin_mail }}"
        - admin_pass: "{{ kimai_admin_pass }}"
        - mysql_root_password: "{{ kimai_mysql_root_password }}"
        - should_publish_ports: true
    - role: ansible-anki
      vars:
        - host_port: "{{ anki_host_port }}"
#    - role: ansible-gallery-client
#      vars:
#        - host_port: "{{ gallery_client_2_host_port }}"
#        - gallery_api_endpoint: "{{ gallery_api_endpoint_2 }}"
#    - role: ansible-gallery-server
#      vars:
#        - domain_name: "{{ gallery_server_2_domain_name }}"
#        - host_port: "{{ gallery_server_2_host_port }}"
#        - aws_bucket: "{{ aws_bucket_gallery_server_2 }}"
#        - aws_dynamo_table: "{{ aws_dynamo_table_2 }}"
    - role: ansible-mealie
      vars:
        - domain_name: "{{ mealie_domain_name }}"
        - host_port: "{{ mealie_host_port }}"
        - jwt_auth_jwk_set_url: "{{ mealie_jwk_set_url }}"
        - log_level: "{{ mealie_log_level }}"
    - role: ansible-flappysonic
      vars:
        - host_port: "{{ flappysonic_host_port }}"
    - role: ansible-thumbor
      vars:
        - host_port: "{{ thumbor_host_port }}"
    - role: ansible-tombraiderjs
      vars:
        - host_port: "{{ tombraiderjs_host_port }}"

- hosts: lightsail
  become: true
  vars_files:
    - /vars/variables.yml
  roles:
    - role: ansible-iptables
      vars:
        - exposed_ports: "{{ lightsail_exposed_ports }}"
    - role: prometheus.prometheus.node_exporter
    - role: ansible-cadvisor
    - role: ansible-restic
      vars:
        - aws_access_key_id: "{{ restic_aws_access_key_id }}"
        - aws_secret_access_key: "{{ restic_aws_secret_access_key }}"
    - role: ansible-openvpn-client
      vars:
        - vpn_endpoint: "{{ openvpn2_domain_name }}"
        - client_private_key: "{{ lookup('file', '/vars/lightsail.key') }}"
        - openvpn_static_key: "{{ lookup('file', '/vars/server.key') }}"
        - client_certificate: "{{ lookup('file', '/vars/lightsail.crt') }}"
        - server_ca: "{{ lookup('file', '/vars/server.crt') }}"
    - role: ansible-gallery-client
      vars:
        - host_port: "{{ gallery_client_host_port }}"
    - role: ansible-gallery-server
      vars:
        - domain_name: "{{ gallery_server_domain_name }}"
        - host_port: "{{ gallery_server_host_port }}"
    - role: ansible-ofelia
      vars:
        - ofelia_config_path: "{{ ofelia_lightsail_config_path }}"
    - role: ansible-apprise
      vars:
        - apprise_config_folder: /vars/apprise
    - role: ansible-plants-client
      vars:
        - host_port: "{{ plants_client_host_port }}"
    - role: ansible-postgres
      vars:
        - database_container_name: "{{ postgres_database_container_name }}"
        - should_publish_ports: true
    - role: ansible-garments-client
      vars:
        - host_port: "{{ garments_client_host_port }}"
    - role: ansible-itemtree-client
      vars:
        - host_port: "{{ itemtree_client_host_port }}"
    - role: ansible-expenses-client
      vars:
        - host_port: "{{ expenses_client_host_port }}"
    - role: ansible-garments-server
      vars:
        - database_url: "{{ garments_database_url }}"
        - database_container_name: "{{ garments_database_container_name }}"
        - database_name: "{{ garments_database_name }}"
        - host_port: "{{ garments_server_host_port }}"
        - database_user: "{{ garments_database_user }}"
        - database_password: "{{ garments_database_password }}"
        - dump_day: 4
    - role: ansible-plants-server
      vars:
        - database_url: "{{ plants_database_url }}"
        - host_port: "{{ plants_server_host_port }}"
        - database_container_name: "{{ plants_database_container_name }}"
        - database_name: "{{ plants_database_name }}"
        - database_user: "{{ plants_database_user }}"
        - database_password: "{{ plants_database_password }}"
        - notifications_service_endpoint: "{{ plants_notifications_service_endpoint }}"
        - dump_day: 3
    - role: ansible-miniflux
      vars:
        - database_url: "{{ miniflux_database_url }}"
        - host_port: "{{ miniflux_host_port }}"
        - database_container_name: "{{ miniflux_database_container_name }}"
        - database_name: "{{ miniflux_database_name }}"
        - database_user: "{{ miniflux_database_user }}"
        - database_password: "{{ miniflux_database_password }}"
        - admin_username: "{{ miniflux_admin_username }}"
        - admin_password: "{{ miniflux_admin_password }}"
        - dump_day: 4
    - role: ansible-itemtree-server
      vars:
        - database_url: "{{ itemtree_database_url }}"
        - host_port: "{{ itemtree_server_host_port }}"
        - database_container_name: "{{ itemtree_database_container_name }}"
        - database_name: "{{ itemtree_database_name }}"
        - database_user: "{{ itemtree_database_user }}"
        - database_password: "{{ itemtree_database_password }}"
        - dump_day: 3
    - role: ansible-expenses-server
      vars:
        - database_url: "{{ expenses_database_url }}"
        - host_port: "{{ expenses_server_host_port }}"
        - database_container_name: "{{ expenses_database_container_name }}"
        - database_name: "{{ expenses_database_name }}"
        - database_user: "{{ expenses_database_user }}"
        - database_password: "{{ expenses_database_password }}"
        - notifications_service_endpoint: "{{ expenses_notifications_service_endpoint }}"
        - dump_day: 5
    - role: ansible-gtd-caldav
      vars:
        - caldav_url: "{{ caldav_endpoint_url }}"
        - username: "{{ caldav_username }}"
        - password: "{{ caldav_password }}"
        - notifications_service_endpoint: "{{ caldav_notifications_service_endpoint }}"
    - role: ansible-retroachievements-apprise
      vars:
        - notifications_service_endpoint: "{{ retroachievements_notifications_service_endpoint }}"
    - role: ansible-recipe-suggestions
      vars:
        - notifications_service_endpoint: "{{ recipe_suggestions_notifications_service_endpoint }}"
    - role: ansible-journaling-service
      vars:
        - database_url: "{{ journaling_database_url }}"
        - database_container_name: "{{ journaling_database_container_name }}"
        - database_name: "{{ journaling_database_name }}"
        - database_user: "{{ journaling_database_user }}"
        - database_password: "{{ journaling_database_password }}"
        - dump_day: 4
    - role: ansible-user-info-service
      vars:
        - database_url: "{{ users_database_url }}"
        - jwk_endpoint: "{{ pomerium_jwk_endpoint }}"
        - database_container_name: "{{ users_database_container_name }}"
        - database_name: "{{ users_database_name }}"
        - database_user: "{{ users_database_user }}"
        - database_password: "{{ users_database_password }}"
        - dump_day: 2
    - role: ansible-thumbor2
      vars:
        - backup_day: 3

- hosts: bastion
  become: true
  vars_files:
    - /vars/variables.yml
  roles:
    - role: prometheus.prometheus.node_exporter
    - role: ansible-cadvisor
    - role: ansible-restic
      vars:
        - aws_access_key_id: "{{ restic_aws_access_key_id }}"
        - aws_secret_access_key: "{{ restic_aws_secret_access_key }}"
    - role: ansible-reverse-proxy
      vars:
        - proxy_buffer_size: "8k"
        - client_max_body_sizes: "{{ bastion_proxy_client_max_body_sizes }}"
    - role: ansible-pomerium
      vars:
        - application_name: "pomerium"
        - pomerium_config_path: "/vars/pomerium_config.yaml"
    - role: ansible-openvpn-server
      vars:
        - application_name: "openvpn2"
        - openvpn_config_folder: /vars/openvpn
        - domain_name: "{{ openvpn2_domain_name }}"

- hosts: seedbox2
  become: true
  vars_files:
    - /vars/variables.yml
  roles:
    - role: prometheus.prometheus.node_exporter
    - role: ansible-restic
      vars:
        - aws_access_key_id: "{{ restic_aws_access_key_id }}"
        - aws_secret_access_key: "{{ restic_aws_secret_access_key }}"
        - initial_targets_file_path: "{{ seedbox2_initial_targets_file_path }}"
    - role: ansible-cadvisor
    - role: ansible-openvpn-client
      vars:
        - vpn_endpoint: "{{ openvpn2_domain_name }}"
        - client_private_key: "{{ lookup('file', '/vars/seedbox2.key') }}"
        - openvpn_static_key: "{{ lookup('file', '/vars/server.key') }}"
        - client_certificate: "{{ lookup('file', '/vars/seedbox2.crt') }}"
        - server_ca: "{{ lookup('file', '/vars/server.crt') }}"
    - role: ansible-deluge
      vars:
        - deluge_downloads_folder: "{{ downloads_folder }}"
        - deluge_movies_folder: "{{ movies_folder }}"
        - deluge_tv_folder: "{{ tv_folder }}"
    - ansible-jackett
    - role: ansible-sonarr
      vars:
        - sonarr_downloads_folder: "{{ downloads_folder }}"
        - sonarr_tv_folder: "{{ tv_folder }}"
    - role: ansible-radarr
      vars:
        - radarr_downloads_folder: "{{ downloads_folder }}"
        - radarr_movies_folder: "{{ movies_folder }}"
    - role: ansible-bazarr
      vars:
        - bazarr_movies_folder: "{{ movies_folder }}"
        - bazarr_tv_folder: "{{ tv_folder }}"
    - ansible-amule
    - role: ansible-external-storage
      vars:
        - target_directory: "{{ target_directory_disk_1 }}"
        - external_storage_device_id: "{{ external_storage_device_id_disk_1 }}"
    - role: ansible-external-storage
      vars:
        - target_directory: "{{ target_directory_disk_2 }}"
        - external_storage_device_id: "{{ external_storage_device_id_disk_2 }}"
    - role: ansible-samba
      vars:
        - home_username: "{{ samba_host_home_username }}"
    - role: ansible-postgres
      vars:
        - database_container_name: "{{ seedbox_postgres_database_container_name }}"
        - network_name: "{{ seedbox_postgres_database_network_name }}"
    - role: ansible-nextcloud
      vars:
        - app_container_name: nextcloud-app
        - host_port: "{{ nextcloud_host_port }}"
        - database_container_name: "{{ nextcloud_database_container_name }}"
        - database_name: "{{ nextcloud_database_name }}"
        - database_user: "{{ nextcloud_database_user }}"
        - database_password: "{{ nextcloud_database_password }}"
        - mysql_root_password: "{{ nextcloud_mysql_root_password }}"
        - trusted_domains: "{{ nextcloud_domain_name }}"
        - admin_user: "{{ nextcloud_admin_user }}"
        - admin_password: "{{ nextcloud_admin_password }}"
        - user: "{{ nextcloud_user }}"
        - group: "{{ nextcloud_group }}"
        - uid: "{{ nextcloud_uid }}"
        - gid: "{{ nextcloud_gid }}"
        - dump_day: 2
        - backup_day: 4

- hosts: retropie
  become: true
  vars_files:
    - /vars/variables.yml
  roles:
   # Not needed anymore
   #- ansible-cec
   #- ansible-tweak-overscan
    - role: ansible-samba-mounts
      vars:
        - gid: "{{ samba_gid }}"
        - uid: "{{ samba_uid }}"

- hosts: lenovo
  become: true
  vars_files:
    - /vars/variables.yml
  roles:
    - role: prometheus.prometheus.node_exporter
    - role: ansible-cadvisor
    - role: ansible-restic
      vars:
        - aws_access_key_id: "{{ restic_aws_access_key_id }}"
        - aws_secret_access_key: "{{ restic_aws_secret_access_key }}"
    - role: ansible-ofelia
      vars:
        - ofelia_config_path: "{{ ofelia_lenovo_config_path }}"
    - role: ansible-loki
      vars:
        - host_port: "{{ loki_host_port }}"
    - role: ansible-grafana
      vars:
        - host_port: "{{ grafana_host_port }}"
        - admin_user: "{{ grafana_admin_user }}"
        - admin_password: "{{ grafana_admin_password }}"
        - user: "{{ grafana_user }}"
        - group: "{{ grafana_group }}"
        - uid: "{{ grafana_uid }}"
        - gid: "{{ grafana_gid }}"
        - grafana_config_folder: /vars/grafana
    - role: ansible-prometheus
      vars:
        - host_port: "{{ prometheus_host_port }}"
        - gid: "{{ prometheus_gid }}"
        - uid: "{{ prometheus_uid }}"
    - role: ansible-openvpn-client
      vars:
        - vpn_endpoint: "{{ openvpn2_domain_name }}"
        - client_private_key: "{{ lookup('file', '/vars/lenovo.key') }}"
        - openvpn_static_key: "{{ lookup('file', '/vars/server.key') }}"
        - client_certificate: "{{ lookup('file', '/vars/lenovo.crt') }}"
        - server_ca: "{{ lookup('file', '/vars/server.crt') }}"
    - role: ansible-postgres
      vars:
        - database_container_name: "{{ lenovo_postgres_database_container_name }}"
        - network_name: "{{ lenovo_postgres_database_network_name }}"
    - role: ansible-immich
      vars:
        - host_port: "{{ immich_host_port }}"
        - database_container_name: "postgres-{{ lenovo_postgres_database_container_name }}"
        - database_user: "{{ immich_database_user }}"
        - database_password: "{{ immich_database_password }}"
        - database_name: "{{ immich_database_name }}"
        - redis_hostname: "{{ immich_redis_hostname }}"
    - role: ansible-redis
      vars:
        - network_name: "{{ lenovo_redis_network_name }}"
    - role: ansible-dashy
      vars:
        - host_port: "{{ dashy_host_port }}"
    - role: ansible-mealie-discord
    - role: ansible-samba-mounts
      vars:
        - gid: "{{ lenovo_samba_gid }}"
        - uid: "{{ lenovo_samba_uid }}"
        - samba_mounts: "{{ lenovo_samba_mounts }}"
    - role: ansible-lidarr
      vars:
        - user: "{{ lidarr_user }}"
        - group: "{{ lidarr_group }}"
        - uid: "{{ lidarr_uid }}"
        - gid: "{{ lidarr_gid }}"
    - role: ansible-funkwhale
    - role: ansible-pleroma
      vars:
        - domain_name: "{{ pleroma_domain_name }}"
        - docker_network_name: "{{ pleroma_network_name }}"
        - instance_name: "{{ pleroma_instance_name }}"
        - admin_mail: "{{ pleroma_admin_mail }}"
        - notify_mail: "{{ pleroma_notify_mail }}"
        - database_user: "{{ pleroma_db_user }}"
        - database_password: "{{ pleroma_db_pass }}"
        - database_name: "{{ pleroma_db_name }}"
        - relay_list_path: "{{ pleroma_relay_list_path }}"
        - database_container_name: "postgres-{{ lenovo_postgres_database_container_name }}"
        - user: "{{ pleroma_user }}"
        - group: "{{ pleroma_group }}"
        - uid: "{{ pleroma_uid }}"
        - gid: "{{ pleroma_gid }}"
        - dump_day: 3
        - backup_day: 5
        - host_port: "{{ pleroma_host_port }}"
    - role: ansible-babybuddy
      vars:
        - uid: "{{ babybuddy_uid }}"
        - gid: "{{ babybuddy_gid }}"
        - url: "{{ babybuddy_url }}"
        - host_port: "{{ babybuddy_host_port }}"
        - database_user: "{{ babybuddy_database_user}}"
        - database_password: "{{ babybuddy_database_password }}"
        - database_name: "{{ babybuddy_database_name }}"
        - database_container_name: "postgres-{{ lenovo_postgres_database_container_name }}"
        - dump_day: 2
        - backup_day: 4
    - role: ansible-tink-firefly-endpoint
      vars:
        - host_port: "{{ tink_homebank_host_port }}"
        - csv_path: "{{ tink_csv_path }}"
        - notifications_service_endpoint: "{{ tink_notifications_service_endpoint }}"
        - firefly_personal_access_token: "{{ firefly_access_token }}"
        - app_url: "{{ firefly_endpoint_app_url }}"
    - role: ansible-firefly
      vars:
        - host_port: "{{ firefly_host_port }}"
        - database_user: "{{ firefly_database_user}}"
        - database_password: "{{ firefly_database_password }}"
        - database_name: "{{ firefly_database_name }}"
        - app_key: "{{ firefly_app_key }}"
        - database_container_name: "postgres-{{ lenovo_postgres_database_container_name }}"
        - dump_day: 2
        - backup_day: 4
    - role: ansible-firefly-importer
      vars:
        - docker_network_name: "{{ firefly_network_name }}"
        - firefly_3_access_token: "{{ firefly_access_token }}"
        - firefly_3_url: "{{ firefly_url }}"
        - import_files_dir: "{{ firefly_import_files_dir }}"
        - notifications_endpoint: "{{ firefly_importer_notifications_endpoint }}"
